
HSE_SYSCLK_8MHZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002a80  08002a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b0c  08002b0c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b0c  08002b0c  00003b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b14  08002b14  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b14  08002b14  00003b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b18  08002b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002b1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002b78  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002b78  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071e9  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001346  00000000  00000000  0000b275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000483  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015659  00000000  00000000  0000d033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a6d  00000000  00000000  0002268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085993  00000000  00000000  0002a0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afa8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c68  00000000  00000000  000afad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b1738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a68 	.word	0x08002a68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002a68 	.word	0x08002a68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SysTick_Handler>:
#include "main.h"



void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005c0:	f000 fa2e 	bl	8000a20 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005c4:	f000 fb7a 	bl	8000cbc <HAL_SYSTICK_IRQHandler>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <main>:




int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0aa      	sub	sp, #168	@ 0xa8
 80005d0:	af00      	add	r7, sp, #0
	char msg[100];
	RCC_OscInitTypeDef osic_init;
	RCC_ClkInitTypeDef clk_init;
	HAL_Init();
 80005d2:	f000 f9d3 	bl	800097c <HAL_Init>


	memset(&osic_init,0,sizeof(osic_init));
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fdc4 	bl	800216c <memset>
	osic_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
	osic_init.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005ec:	61bb      	str	r3, [r7, #24]
	if(HAL_RCC_OscConfig(&osic_init) != HAL_OK)
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fcf4 	bl	8000fe0 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <main+0x36>
	{
		Error_Handler();
 80005fe:	f000 f8b7 	bl	8000770 <Error_Handler>
	}

	memset(&clk_init,0,sizeof(clk_init));
 8000602:	463b      	mov	r3, r7
 8000604:	2214      	movs	r2, #20
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fdaf 	bl	800216c <memset>
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800060e:	230f      	movs	r3, #15
 8000610:	603b      	str	r3, [r7, #0]
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	60bb      	str	r3, [r7, #8]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	60fb      	str	r3, [r7, #12]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	613b      	str	r3, [r7, #16]

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 ff50 	bl	80014d0 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x6e>
	{
		Error_Handler();
 8000636:	f000 f89b 	bl	8000770 <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE();
 800063a:	4b46      	ldr	r3, [pc, #280]	@ (8000754 <main+0x188>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]


	//SYSTICK CONFIG
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000640:	2004      	movs	r0, #4
 8000642:	f000 fb1f 	bl	8000c84 <HAL_SYSTICK_CLKSourceConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / 1000);
 8000646:	f001 f829 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800064a:	4603      	mov	r3, r0
 800064c:	4a42      	ldr	r2, [pc, #264]	@ (8000758 <main+0x18c>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	099b      	lsrs	r3, r3, #6
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fb08 	bl	8000c6a <HAL_SYSTICK_Config>




	UART2_Init();
 800065a:	f000 f88d 	bl	8000778 <UART2_Init>

	memset(msg,0,sizeof(msg));
 800065e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000662:	2264      	movs	r2, #100	@ 0x64
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd80 	bl	800216c <memset>
	sprintf(msg,"SYSCLK : %ld\r\n",HAL_RCC_GetSysClockFreq());
 800066c:	f001 f816 	bl	800169c <HAL_RCC_GetSysClockFreq>
 8000670:	4602      	mov	r2, r0
 8000672:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000676:	4939      	ldr	r1, [pc, #228]	@ (800075c <main+0x190>)
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fd55 	bl	8002128 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800067e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fdac 	bl	80001e0 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	4832      	ldr	r0, [pc, #200]	@ (8000760 <main+0x194>)
 8000696:	f001 f98b 	bl	80019b0 <HAL_UART_Transmit>
	memset(msg,0,sizeof(msg));
 800069a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800069e:	2264      	movs	r2, #100	@ 0x64
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fd62 	bl	800216c <memset>
	sprintf(msg,"HCLK : %ld\r\n",HAL_RCC_GetHCLKFreq());
 80006a8:	f001 f8fe 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80006ac:	4602      	mov	r2, r0
 80006ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006b2:	492c      	ldr	r1, [pc, #176]	@ (8000764 <main+0x198>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fd37 	bl	8002128 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd8e 	bl	80001e0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	4823      	ldr	r0, [pc, #140]	@ (8000760 <main+0x194>)
 80006d2:	f001 f96d 	bl	80019b0 <HAL_UART_Transmit>
	memset(msg,0,sizeof(msg));
 80006d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006da:	2264      	movs	r2, #100	@ 0x64
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fd44 	bl	800216c <memset>
	sprintf(msg,"PCLK1 : %ld\r\n",HAL_RCC_GetPCLK1Freq());
 80006e4:	f001 f8ec 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 80006e8:	4602      	mov	r2, r0
 80006ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006ee:	491e      	ldr	r1, [pc, #120]	@ (8000768 <main+0x19c>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fd19 	bl	8002128 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd70 	bl	80001e0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	4814      	ldr	r0, [pc, #80]	@ (8000760 <main+0x194>)
 800070e:	f001 f94f 	bl	80019b0 <HAL_UART_Transmit>
	memset(msg,0,sizeof(msg));
 8000712:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000716:	2264      	movs	r2, #100	@ 0x64
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fd26 	bl	800216c <memset>
	sprintf(msg,"PCLK2 : %ld\r\n",HAL_RCC_GetPCLK2Freq());
 8000720:	f001 f8e2 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8000724:	4602      	mov	r2, r0
 8000726:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800072a:	4910      	ldr	r1, [pc, #64]	@ (800076c <main+0x1a0>)
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fcfb 	bl	8002128 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000732:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd52 	bl	80001e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <main+0x194>)
 800074a:	f001 f931 	bl	80019b0 <HAL_UART_Transmit>


	while(1);
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x182>
 8000752:	bf00      	nop
 8000754:	42470000 	.word	0x42470000
 8000758:	10624dd3 	.word	0x10624dd3
 800075c:	08002a80 	.word	0x08002a80
 8000760:	20000078 	.word	0x20000078
 8000764:	08002a90 	.word	0x08002a90
 8000768:	08002aa0 	.word	0x08002aa0
 800076c:	08002ab0 	.word	0x08002ab0

08000770 <Error_Handler>:




void Error_Handler()
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	while(1);
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x4>

08000778 <UART2_Init>:
}

void UART2_Init()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <UART2_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	@ (80007c0 <UART2_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <UART2_Init+0x44>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <UART2_Init+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <UART2_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <UART2_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <UART2_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <UART2_Init+0x44>)
 80007a4:	220c      	movs	r2, #12
 80007a6:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <UART2_Init+0x44>)
 80007aa:	f001 f8b1 	bl	8001910 <HAL_UART_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <UART2_Init+0x40>
	{
		//ERROR
		Error_Handler();
 80007b4:	f7ff ffdc 	bl	8000770 <Error_Handler>
	}

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000078 	.word	0x20000078
 80007c0:	40004400 	.word	0x40004400

080007c4 <HAL_MspInit>:




void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	// SET PRIORITIES
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 fa19 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

	//ENABLE SYSTEM EXCEPTIONS
	SCB->SHCSR |= 0x7 <<16;  //USAGE FAULT, MEM FAULT AND BUS FAULT EXCEPTIONS
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <HAL_MspInit+0x40>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <HAL_MspInit+0x40>)
 80007d4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80007d8:	6253      	str	r3, [r2, #36]	@ 0x24

	//CONFIG PRIO FOR SYSTEM EXCEPTION
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	f06f 000b 	mvn.w	r0, #11
 80007e2:	f000 fa18 	bl	8000c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	f06f 000a 	mvn.w	r0, #10
 80007ee:	f000 fa12 	bl	8000c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	f06f 0009 	mvn.w	r0, #9
 80007fa:	f000 fa0c 	bl	8000c16 <HAL_NVIC_SetPriority>

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_UART;

	//ENABLE CLOCK FOR USART2 AND RELATED GPIO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000818:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <HAL_UART_MspInit+0x88>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_UART_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
	//DO PIN MUXING CONFIG
	GPIO_UART.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	617b      	str	r3, [r7, #20]
	GPIO_UART.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
	GPIO_UART.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
	GPIO_UART.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_UART.Alternate = GPIO_AF7_USART2; //TX
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_UART);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000864:	f000 fa38 	bl	8000cd8 <HAL_GPIO_Init>
    GPIO_UART.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_UART); //RX
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4808      	ldr	r0, [pc, #32]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000874:	f000 fa30 	bl	8000cd8 <HAL_GPIO_Init>

    //ENABLE IRQ, AND PRIO SETTINGS
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000878:	2026      	movs	r0, #38	@ 0x26
 800087a:	f000 f9e8 	bl	8000c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	2026      	movs	r0, #38	@ 0x26
 8000884:	f000 f9c7 	bl	8000c16 <HAL_NVIC_SetPriority>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	@ 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f001 fc58 	bl	800217c <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000c0 	.word	0x200000c0
 8000900:	20000210 	.word	0x20000210

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f001 fc17 	bl	8002188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fe37 	bl	80005cc <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800096c:	08002b1c 	.word	0x08002b1c
  ldr r2, =_sbss
 8000970:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000974:	20000210 	.word	0x20000210

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f92b 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff ff08 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f943 	bl	8000c6a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f90b 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	200000c4 	.word	0x200000c4

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	200000c4 	.word	0x200000c4

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4907      	ldr	r1, [pc, #28]	@ (8000afc <__NVIC_EnableIRQ+0x38>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	@ (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff29 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff3e 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff31 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa2 	bl	8000bbc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d106      	bne.n	8000ca0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c9e:	e005      	b.n	8000cac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca6:	f023 0304 	bic.w	r3, r3, #4
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cc0:	f000 f802 	bl	8000cc8 <HAL_SYSTICK_Callback>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e159      	b.n	8000fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8148 	bne.w	8000fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d005      	beq.n	8000d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d130      	bne.n	8000d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	f003 0201 	and.w	r2, r3, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d017      	beq.n	8000dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d123      	bne.n	8000e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	69b9      	ldr	r1, [r7, #24]
 8000e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0203 	and.w	r2, r3, #3
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80a2 	beq.w	8000fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b57      	ldr	r3, [pc, #348]	@ (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a56      	ldr	r2, [pc, #344]	@ (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b54      	ldr	r3, [pc, #336]	@ (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <HAL_GPIO_Init+0x2ec>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x202>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a48      	ldr	r2, [pc, #288]	@ (8000fcc <HAL_GPIO_Init+0x2f4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1fe>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a47      	ldr	r2, [pc, #284]	@ (8000fd0 <HAL_GPIO_Init+0x2f8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1fa>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	@ (8000fd4 <HAL_GPIO_Init+0x2fc>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1f6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a45      	ldr	r2, [pc, #276]	@ (8000fd8 <HAL_GPIO_Init+0x300>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1f2>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	@ (8000fc4 <HAL_GPIO_Init+0x2ec>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1a      	ldr	r2, [pc, #104]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f aea2 	bls.w	8000cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e267      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d075      	beq.n	80010ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ffe:	4b88      	ldr	r3, [pc, #544]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b04      	cmp	r3, #4
 8001008:	d00c      	beq.n	8001024 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100a:	4b85      	ldr	r3, [pc, #532]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001012:	2b08      	cmp	r3, #8
 8001014:	d112      	bne.n	800103c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b82      	ldr	r3, [pc, #520]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001022:	d10b      	bne.n	800103c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	4b7e      	ldr	r3, [pc, #504]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d05b      	beq.n	80010e8 <HAL_RCC_OscConfig+0x108>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d157      	bne.n	80010e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e242      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x74>
 8001046:	4b76      	ldr	r3, [pc, #472]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a75      	ldr	r2, [pc, #468]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e01d      	b.n	8001090 <HAL_RCC_OscConfig+0xb0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b70      	ldr	r3, [pc, #448]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6f      	ldr	r2, [pc, #444]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b6d      	ldr	r3, [pc, #436]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6c      	ldr	r2, [pc, #432]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0xb0>
 8001078:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a68      	ldr	r2, [pc, #416]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b66      	ldr	r3, [pc, #408]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a65      	ldr	r2, [pc, #404]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800108e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fcd6 	bl	8000a48 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fcd2 	bl	8000a48 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	@ 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e207      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0xc0>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fcc2 	bl	8000a48 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fcbe 	bl	8000a48 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1f3      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	4b51      	ldr	r3, [pc, #324]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0xe8>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d063      	beq.n	80011be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001102:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800110a:	2b08      	cmp	r3, #8
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	4b44      	ldr	r3, [pc, #272]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_RCC_OscConfig+0x152>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e1c7      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4937      	ldr	r1, [pc, #220]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	e03a      	b.n	80011be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <HAL_RCC_OscConfig+0x244>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fc77 	bl	8000a48 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fc73 	bl	8000a48 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1a8      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4925      	ldr	r1, [pc, #148]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
 8001190:	e015      	b.n	80011be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <HAL_RCC_OscConfig+0x244>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fc56 	bl	8000a48 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc52 	bl	8000a48 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e187      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d036      	beq.n	8001238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d016      	beq.n	8001200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_RCC_OscConfig+0x248>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc36 	bl	8000a48 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc32 	bl	8000a48 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e167      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_RCC_OscConfig+0x240>)
 80011f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x200>
 80011fe:	e01b      	b.n	8001238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_RCC_OscConfig+0x248>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fc1f 	bl	8000a48 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	e00e      	b.n	800122c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120e:	f7ff fc1b 	bl	8000a48 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d907      	bls.n	800122c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e150      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
 8001220:	40023800 	.word	0x40023800
 8001224:	42470000 	.word	0x42470000
 8001228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122c:	4b88      	ldr	r3, [pc, #544]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800122e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ea      	bne.n	800120e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8097 	beq.w	8001374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b81      	ldr	r3, [pc, #516]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b7d      	ldr	r3, [pc, #500]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a7c      	ldr	r2, [pc, #496]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b7a      	ldr	r3, [pc, #488]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001272:	2301      	movs	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b77      	ldr	r3, [pc, #476]	@ (8001454 <HAL_RCC_OscConfig+0x474>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001282:	4b74      	ldr	r3, [pc, #464]	@ (8001454 <HAL_RCC_OscConfig+0x474>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a73      	ldr	r2, [pc, #460]	@ (8001454 <HAL_RCC_OscConfig+0x474>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128e:	f7ff fbdb 	bl	8000a48 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001296:	f7ff fbd7 	bl	8000a48 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e10c      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001454 <HAL_RCC_OscConfig+0x474>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x2ea>
 80012bc:	4b64      	ldr	r3, [pc, #400]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c0:	4a63      	ldr	r2, [pc, #396]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c8:	e01c      	b.n	8001304 <HAL_RCC_OscConfig+0x324>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x30c>
 80012d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80012de:	4b5c      	ldr	r3, [pc, #368]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0x324>
 80012ec:	4b58      	ldr	r3, [pc, #352]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f0:	4a57      	ldr	r2, [pc, #348]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f8:	4b55      	ldr	r3, [pc, #340]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fc:	4a54      	ldr	r2, [pc, #336]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d015      	beq.n	8001338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fb9c 	bl	8000a48 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fb98 	bl	8000a48 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0cb      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132a:	4b49      	ldr	r3, [pc, #292]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0ee      	beq.n	8001314 <HAL_RCC_OscConfig+0x334>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fb86 	bl	8000a48 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fb82 	bl	8000a48 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0b5      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001356:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ee      	bne.n	8001340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001368:	4b39      	ldr	r3, [pc, #228]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4a38      	ldr	r2, [pc, #224]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800136e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a1 	beq.w	80014c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b08      	cmp	r3, #8
 8001388:	d05c      	beq.n	8001444 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d141      	bne.n	8001416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <HAL_RCC_OscConfig+0x478>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fb56 	bl	8000a48 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fb52 	bl	8000a48 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e087      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	019b      	lsls	r3, r3, #6
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	491b      	ldr	r1, [pc, #108]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_RCC_OscConfig+0x478>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb2b 	bl	8000a48 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fb27 	bl	8000a48 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e05c      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x416>
 8001414:	e054      	b.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_RCC_OscConfig+0x478>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb14 	bl	8000a48 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fb10 	bl	8000a48 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e045      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_RCC_OscConfig+0x470>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
 8001442:	e03d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d107      	bne.n	800145c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e038      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000
 8001458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x4ec>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d028      	beq.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d121      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d11a      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800148c:	4013      	ands	r3, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001494:	4293      	cmp	r3, r2
 8001496:	d111      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a2:	085b      	lsrs	r3, r3, #1
 80014a4:	3b01      	subs	r3, #1
 80014a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fa42 	bl	8000a48 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fa3e 	bl	8000a48 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4602      	mov	r2, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	490a      	ldr	r1, [pc, #40]	@ (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5ccb      	ldrb	r3, [r1, r3]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f9a2 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	08002ac0 	.word	0x08002ac0
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a0:	b094      	sub	sp, #80	@ 0x50
 80016a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b4:	4b79      	ldr	r3, [pc, #484]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d00d      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x40>
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	f200 80e1 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x34>
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ce:	e0db      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b73      	ldr	r3, [pc, #460]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016d4:	e0db      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4b73      	ldr	r3, [pc, #460]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80016d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016da:	e0d8      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4b6f      	ldr	r3, [pc, #444]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4b6d      	ldr	r3, [pc, #436]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	2200      	movs	r2, #0
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
 800170a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4621      	mov	r1, r4
 8001728:	1a51      	subs	r1, r2, r1
 800172a:	6139      	str	r1, [r7, #16]
 800172c:	4629      	mov	r1, r5
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001740:	4659      	mov	r1, fp
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4651      	mov	r1, sl
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4651      	mov	r1, sl
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4651      	mov	r1, sl
 8001750:	ebb2 0801 	subs.w	r8, r2, r1
 8001754:	4659      	mov	r1, fp
 8001756:	eb63 0901 	sbc.w	r9, r3, r1
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800176e:	4690      	mov	r8, r2
 8001770:	4699      	mov	r9, r3
 8001772:	4623      	mov	r3, r4
 8001774:	eb18 0303 	adds.w	r3, r8, r3
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	462b      	mov	r3, r5
 800177c:	eb49 0303 	adc.w	r3, r9, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800178e:	4629      	mov	r1, r5
 8001790:	024b      	lsls	r3, r1, #9
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001798:	4621      	mov	r1, r4
 800179a:	024a      	lsls	r2, r1, #9
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a2:	2200      	movs	r2, #0
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017ac:	f7fe fd70 	bl	8000290 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017b8:	e058      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	2200      	movs	r2, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	4611      	mov	r1, r2
 80017c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017d4:	4642      	mov	r2, r8
 80017d6:	464b      	mov	r3, r9
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	0159      	lsls	r1, r3, #5
 80017e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e6:	0150      	lsls	r0, r2, #5
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4641      	mov	r1, r8
 80017ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f2:	4649      	mov	r1, r9
 80017f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800180c:	ebb2 040a 	subs.w	r4, r2, sl
 8001810:	eb63 050b 	sbc.w	r5, r3, fp
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	00eb      	lsls	r3, r5, #3
 800181e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001822:	00e2      	lsls	r2, r4, #3
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
 8001828:	4643      	mov	r3, r8
 800182a:	18e3      	adds	r3, r4, r3
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	464b      	mov	r3, r9
 8001830:	eb45 0303 	adc.w	r3, r5, r3
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001842:	4629      	mov	r1, r5
 8001844:	028b      	lsls	r3, r1, #10
 8001846:	4621      	mov	r1, r4
 8001848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800184c:	4621      	mov	r1, r4
 800184e:	028a      	lsls	r2, r1, #10
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001856:	2200      	movs	r2, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	61fa      	str	r2, [r7, #28]
 800185c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001860:	f7fe fd16 	bl	8000290 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800187c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800187e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800188a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001890:	4618      	mov	r0, r3
 8001892:	3750      	adds	r7, #80	@ 0x50
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	007a1200 	.word	0x007a1200

080018a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0a9b      	lsrs	r3, r3, #10
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	@ (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08002ad0 	.word	0x08002ad0

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ec:	f7ff ffdc 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0b5b      	lsrs	r3, r3, #13
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	@ (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08002ad0 	.word	0x08002ad0

08001910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e042      	b.n	80019a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe ff66 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2224      	movs	r2, #36	@ 0x24
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f973 	bl	8001c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d175      	bne.n	8001abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_UART_Transmit+0x2c>
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e06e      	b.n	8001abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2221      	movs	r2, #33	@ 0x21
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ee:	f7ff f82b 	bl	8000a48 <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	88fa      	ldrh	r2, [r7, #6]
 80019fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a08:	d108      	bne.n	8001a1c <HAL_UART_Transmit+0x6c>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e003      	b.n	8001a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a24:	e02e      	b.n	8001a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2180      	movs	r1, #128	@ 0x80
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f848 	bl	8001ac6 <UART_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e03a      	b.n	8001abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10b      	bne.n	8001a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	3302      	adds	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	e007      	b.n	8001a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1cb      	bne.n	8001a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2140      	movs	r1, #64	@ 0x40
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f814 	bl	8001ac6 <UART_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e006      	b.n	8001abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad6:	e03b      	b.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	d037      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7fe ffb2 	bl	8000a48 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	6a3a      	ldr	r2, [r7, #32]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e03a      	b.n	8001b70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b80      	cmp	r3, #128	@ 0x80
 8001b0c:	d020      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b40      	cmp	r3, #64	@ 0x40
 8001b12:	d01d      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d116      	bne.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f81d 	bl	8001b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2208      	movs	r2, #8
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e00f      	b.n	8001b70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d0b4      	beq.n	8001ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b095      	sub	sp, #84	@ 0x54
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b8a:	e853 3f00 	ldrex	r3, [r3]
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ba0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ba8:	e841 2300 	strex	r3, r2, [r1]
 8001bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e5      	bne.n	8001b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3314      	adds	r3, #20
 8001bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	e853 3f00 	ldrex	r3, [r3]
 8001bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bdc:	e841 2300 	strex	r3, r2, [r1]
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e5      	bne.n	8001bb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d119      	bne.n	8001c24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	e853 3f00 	ldrex	r3, [r3]
 8001bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f023 0310 	bic.w	r3, r3, #16
 8001c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c10:	61ba      	str	r2, [r7, #24]
 8001c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	e841 2300 	strex	r3, r2, [r1]
 8001c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e5      	bne.n	8001bf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c32:	bf00      	nop
 8001c34:	3754      	adds	r7, #84	@ 0x54
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b0c0      	sub	sp, #256	@ 0x100
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	ea40 0301 	orr.w	r3, r0, r1
 8001c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c98:	f021 010c 	bic.w	r1, r1, #12
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cba:	6999      	ldr	r1, [r3, #24]
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	ea40 0301 	orr.w	r3, r0, r1
 8001cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b8f      	ldr	r3, [pc, #572]	@ (8001f0c <UART_SetConfig+0x2cc>)
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d005      	beq.n	8001ce0 <UART_SetConfig+0xa0>
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b8d      	ldr	r3, [pc, #564]	@ (8001f10 <UART_SetConfig+0x2d0>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d104      	bne.n	8001cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ce0:	f7ff fe02 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ce8:	e003      	b.n	8001cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cea:	f7ff fde9 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001cee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cfc:	f040 810c 	bne.w	8001f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d04:	2200      	movs	r2, #0
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d12:	4622      	mov	r2, r4
 8001d14:	462b      	mov	r3, r5
 8001d16:	1891      	adds	r1, r2, r2
 8001d18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d1a:	415b      	adcs	r3, r3
 8001d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d22:	4621      	mov	r1, r4
 8001d24:	eb12 0801 	adds.w	r8, r2, r1
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb43 0901 	adc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d50:	462b      	mov	r3, r5
 8001d52:	eb49 0303 	adc.w	r3, r9, r3
 8001d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d6e:	460b      	mov	r3, r1
 8001d70:	18db      	adds	r3, r3, r3
 8001d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d74:	4613      	mov	r3, r2
 8001d76:	eb42 0303 	adc.w	r3, r2, r3
 8001d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d84:	f7fe fa84 	bl	8000290 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	011c      	lsls	r4, r3, #4
 8001d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001da0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	1891      	adds	r1, r2, r2
 8001dae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001db0:	415b      	adcs	r3, r3
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001db8:	4641      	mov	r1, r8
 8001dba:	eb12 0a01 	adds.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dd8:	4692      	mov	sl, r2
 8001dda:	469b      	mov	fp, r3
 8001ddc:	4643      	mov	r3, r8
 8001dde:	eb1a 0303 	adds.w	r3, sl, r3
 8001de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001de6:	464b      	mov	r3, r9
 8001de8:	eb4b 0303 	adc.w	r3, fp, r3
 8001dec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e04:	460b      	mov	r3, r1
 8001e06:	18db      	adds	r3, r3, r3
 8001e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	eb42 0303 	adc.w	r3, r2, r3
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e1a:	f7fe fa39 	bl	8000290 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001e26:	fba3 2301 	umull	r2, r3, r3, r1
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2264      	movs	r2, #100	@ 0x64
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e3a:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e48:	441c      	add	r4, r3
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1891      	adds	r1, r2, r2
 8001e62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e64:	415b      	adcs	r3, r3
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	1851      	adds	r1, r2, r1
 8001e70:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e72:	4649      	mov	r1, r9
 8001e74:	414b      	adcs	r3, r1
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e84:	4659      	mov	r1, fp
 8001e86:	00cb      	lsls	r3, r1, #3
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e8e:	4651      	mov	r1, sl
 8001e90:	00ca      	lsls	r2, r1, #3
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	4642      	mov	r2, r8
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	eb42 0303 	adc.w	r3, r2, r3
 8001ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001ed6:	f7fe f9db 	bl	8000290 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	2164      	movs	r1, #100	@ 0x64
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	3332      	adds	r3, #50	@ 0x32
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4422      	add	r2, r4
 8001f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f08:	e106      	b.n	8002118 <UART_SetConfig+0x4d8>
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	1891      	adds	r1, r2, r2
 8001f30:	6239      	str	r1, [r7, #32]
 8001f32:	415b      	adcs	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	1854      	adds	r4, r2, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	eb43 0501 	adc.w	r5, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f60:	464b      	mov	r3, r9
 8001f62:	eb45 0303 	adc.w	r3, r5, r3
 8001f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f86:	4629      	mov	r1, r5
 8001f88:	008b      	lsls	r3, r1, #2
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f90:	4621      	mov	r1, r4
 8001f92:	008a      	lsls	r2, r1, #2
 8001f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f98:	f7fe f97a 	bl	8000290 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <UART_SetConfig+0x4e4>)
 8001fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	011c      	lsls	r4, r3, #4
 8001faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	1891      	adds	r1, r2, r2
 8001fc2:	61b9      	str	r1, [r7, #24]
 8001fc4:	415b      	adcs	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	4641      	mov	r1, r8
 8001fce:	1851      	adds	r1, r2, r1
 8001fd0:	6139      	str	r1, [r7, #16]
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	414b      	adcs	r3, r1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	00cb      	lsls	r3, r1, #3
 8001fe8:	4651      	mov	r1, sl
 8001fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fee:	4651      	mov	r1, sl
 8001ff0:	00ca      	lsls	r2, r1, #3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	189b      	adds	r3, r3, r2
 8001ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002000:	464b      	mov	r3, r9
 8002002:	460a      	mov	r2, r1
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002024:	4649      	mov	r1, r9
 8002026:	008b      	lsls	r3, r1, #2
 8002028:	4641      	mov	r1, r8
 800202a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800202e:	4641      	mov	r1, r8
 8002030:	008a      	lsls	r2, r1, #2
 8002032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002036:	f7fe f92b 	bl	8000290 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4611      	mov	r1, r2
 8002040:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002042:	fba3 2301 	umull	r2, r3, r3, r1
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2264      	movs	r2, #100	@ 0x64
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	1acb      	subs	r3, r1, r3
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	3332      	adds	r3, #50	@ 0x32
 8002054:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002060:	441c      	add	r4, r3
 8002062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002066:	2200      	movs	r2, #0
 8002068:	673b      	str	r3, [r7, #112]	@ 0x70
 800206a:	677a      	str	r2, [r7, #116]	@ 0x74
 800206c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002070:	4642      	mov	r2, r8
 8002072:	464b      	mov	r3, r9
 8002074:	1891      	adds	r1, r2, r2
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	415b      	adcs	r3, r3
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002080:	4641      	mov	r1, r8
 8002082:	1851      	adds	r1, r2, r1
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	4649      	mov	r1, r9
 8002088:	414b      	adcs	r3, r1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002098:	4659      	mov	r1, fp
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	4651      	mov	r1, sl
 800209e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a2:	4651      	mov	r1, sl
 80020a4:	00ca      	lsls	r2, r1, #3
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	4642      	mov	r2, r8
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020b2:	464b      	mov	r3, r9
 80020b4:	460a      	mov	r2, r1
 80020b6:	eb42 0303 	adc.w	r3, r2, r3
 80020ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80020c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80020d4:	4649      	mov	r1, r9
 80020d6:	008b      	lsls	r3, r1, #2
 80020d8:	4641      	mov	r1, r8
 80020da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020de:	4641      	mov	r1, r8
 80020e0:	008a      	lsls	r2, r1, #2
 80020e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020e6:	f7fe f8d3 	bl	8000290 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <UART_SetConfig+0x4e4>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2164      	movs	r1, #100	@ 0x64
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	3332      	adds	r3, #50	@ 0x32
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4422      	add	r2, r4
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800211e:	46bd      	mov	sp, r7
 8002120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002124:	51eb851f 	.word	0x51eb851f

08002128 <siprintf>:
 8002128:	b40e      	push	{r1, r2, r3}
 800212a:	b510      	push	{r4, lr}
 800212c:	b09d      	sub	sp, #116	@ 0x74
 800212e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002130:	9002      	str	r0, [sp, #8]
 8002132:	9006      	str	r0, [sp, #24]
 8002134:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002138:	480a      	ldr	r0, [pc, #40]	@ (8002164 <siprintf+0x3c>)
 800213a:	9107      	str	r1, [sp, #28]
 800213c:	9104      	str	r1, [sp, #16]
 800213e:	490a      	ldr	r1, [pc, #40]	@ (8002168 <siprintf+0x40>)
 8002140:	f853 2b04 	ldr.w	r2, [r3], #4
 8002144:	9105      	str	r1, [sp, #20]
 8002146:	2400      	movs	r4, #0
 8002148:	a902      	add	r1, sp, #8
 800214a:	6800      	ldr	r0, [r0, #0]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002150:	f000 f994 	bl	800247c <_svfiprintf_r>
 8002154:	9b02      	ldr	r3, [sp, #8]
 8002156:	701c      	strb	r4, [r3, #0]
 8002158:	b01d      	add	sp, #116	@ 0x74
 800215a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800215e:	b003      	add	sp, #12
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000000c 	.word	0x2000000c
 8002168:	ffff0208 	.word	0xffff0208

0800216c <memset>:
 800216c:	4402      	add	r2, r0
 800216e:	4603      	mov	r3, r0
 8002170:	4293      	cmp	r3, r2
 8002172:	d100      	bne.n	8002176 <memset+0xa>
 8002174:	4770      	bx	lr
 8002176:	f803 1b01 	strb.w	r1, [r3], #1
 800217a:	e7f9      	b.n	8002170 <memset+0x4>

0800217c <__errno>:
 800217c:	4b01      	ldr	r3, [pc, #4]	@ (8002184 <__errno+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000000c 	.word	0x2000000c

08002188 <__libc_init_array>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4d0d      	ldr	r5, [pc, #52]	@ (80021c0 <__libc_init_array+0x38>)
 800218c:	4c0d      	ldr	r4, [pc, #52]	@ (80021c4 <__libc_init_array+0x3c>)
 800218e:	1b64      	subs	r4, r4, r5
 8002190:	10a4      	asrs	r4, r4, #2
 8002192:	2600      	movs	r6, #0
 8002194:	42a6      	cmp	r6, r4
 8002196:	d109      	bne.n	80021ac <__libc_init_array+0x24>
 8002198:	4d0b      	ldr	r5, [pc, #44]	@ (80021c8 <__libc_init_array+0x40>)
 800219a:	4c0c      	ldr	r4, [pc, #48]	@ (80021cc <__libc_init_array+0x44>)
 800219c:	f000 fc64 	bl	8002a68 <_init>
 80021a0:	1b64      	subs	r4, r4, r5
 80021a2:	10a4      	asrs	r4, r4, #2
 80021a4:	2600      	movs	r6, #0
 80021a6:	42a6      	cmp	r6, r4
 80021a8:	d105      	bne.n	80021b6 <__libc_init_array+0x2e>
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b0:	4798      	blx	r3
 80021b2:	3601      	adds	r6, #1
 80021b4:	e7ee      	b.n	8002194 <__libc_init_array+0xc>
 80021b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ba:	4798      	blx	r3
 80021bc:	3601      	adds	r6, #1
 80021be:	e7f2      	b.n	80021a6 <__libc_init_array+0x1e>
 80021c0:	08002b14 	.word	0x08002b14
 80021c4:	08002b14 	.word	0x08002b14
 80021c8:	08002b14 	.word	0x08002b14
 80021cc:	08002b18 	.word	0x08002b18

080021d0 <__retarget_lock_acquire_recursive>:
 80021d0:	4770      	bx	lr

080021d2 <__retarget_lock_release_recursive>:
 80021d2:	4770      	bx	lr

080021d4 <_free_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	2900      	cmp	r1, #0
 80021da:	d041      	beq.n	8002260 <_free_r+0x8c>
 80021dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e0:	1f0c      	subs	r4, r1, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bfb8      	it	lt
 80021e6:	18e4      	addlt	r4, r4, r3
 80021e8:	f000 f8e0 	bl	80023ac <__malloc_lock>
 80021ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002264 <_free_r+0x90>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	b933      	cbnz	r3, 8002200 <_free_r+0x2c>
 80021f2:	6063      	str	r3, [r4, #4]
 80021f4:	6014      	str	r4, [r2, #0]
 80021f6:	4628      	mov	r0, r5
 80021f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021fc:	f000 b8dc 	b.w	80023b8 <__malloc_unlock>
 8002200:	42a3      	cmp	r3, r4
 8002202:	d908      	bls.n	8002216 <_free_r+0x42>
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	1821      	adds	r1, r4, r0
 8002208:	428b      	cmp	r3, r1
 800220a:	bf01      	itttt	eq
 800220c:	6819      	ldreq	r1, [r3, #0]
 800220e:	685b      	ldreq	r3, [r3, #4]
 8002210:	1809      	addeq	r1, r1, r0
 8002212:	6021      	streq	r1, [r4, #0]
 8002214:	e7ed      	b.n	80021f2 <_free_r+0x1e>
 8002216:	461a      	mov	r2, r3
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b10b      	cbz	r3, 8002220 <_free_r+0x4c>
 800221c:	42a3      	cmp	r3, r4
 800221e:	d9fa      	bls.n	8002216 <_free_r+0x42>
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	1850      	adds	r0, r2, r1
 8002224:	42a0      	cmp	r0, r4
 8002226:	d10b      	bne.n	8002240 <_free_r+0x6c>
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	4401      	add	r1, r0
 800222c:	1850      	adds	r0, r2, r1
 800222e:	4283      	cmp	r3, r0
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	d1e0      	bne.n	80021f6 <_free_r+0x22>
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	6053      	str	r3, [r2, #4]
 800223a:	4408      	add	r0, r1
 800223c:	6010      	str	r0, [r2, #0]
 800223e:	e7da      	b.n	80021f6 <_free_r+0x22>
 8002240:	d902      	bls.n	8002248 <_free_r+0x74>
 8002242:	230c      	movs	r3, #12
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	e7d6      	b.n	80021f6 <_free_r+0x22>
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	1821      	adds	r1, r4, r0
 800224c:	428b      	cmp	r3, r1
 800224e:	bf04      	itt	eq
 8002250:	6819      	ldreq	r1, [r3, #0]
 8002252:	685b      	ldreq	r3, [r3, #4]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	bf04      	itt	eq
 8002258:	1809      	addeq	r1, r1, r0
 800225a:	6021      	streq	r1, [r4, #0]
 800225c:	6054      	str	r4, [r2, #4]
 800225e:	e7ca      	b.n	80021f6 <_free_r+0x22>
 8002260:	bd38      	pop	{r3, r4, r5, pc}
 8002262:	bf00      	nop
 8002264:	2000020c 	.word	0x2000020c

08002268 <sbrk_aligned>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4e0f      	ldr	r6, [pc, #60]	@ (80022a8 <sbrk_aligned+0x40>)
 800226c:	460c      	mov	r4, r1
 800226e:	6831      	ldr	r1, [r6, #0]
 8002270:	4605      	mov	r5, r0
 8002272:	b911      	cbnz	r1, 800227a <sbrk_aligned+0x12>
 8002274:	f000 fba4 	bl	80029c0 <_sbrk_r>
 8002278:	6030      	str	r0, [r6, #0]
 800227a:	4621      	mov	r1, r4
 800227c:	4628      	mov	r0, r5
 800227e:	f000 fb9f 	bl	80029c0 <_sbrk_r>
 8002282:	1c43      	adds	r3, r0, #1
 8002284:	d103      	bne.n	800228e <sbrk_aligned+0x26>
 8002286:	f04f 34ff 	mov.w	r4, #4294967295
 800228a:	4620      	mov	r0, r4
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	1cc4      	adds	r4, r0, #3
 8002290:	f024 0403 	bic.w	r4, r4, #3
 8002294:	42a0      	cmp	r0, r4
 8002296:	d0f8      	beq.n	800228a <sbrk_aligned+0x22>
 8002298:	1a21      	subs	r1, r4, r0
 800229a:	4628      	mov	r0, r5
 800229c:	f000 fb90 	bl	80029c0 <_sbrk_r>
 80022a0:	3001      	adds	r0, #1
 80022a2:	d1f2      	bne.n	800228a <sbrk_aligned+0x22>
 80022a4:	e7ef      	b.n	8002286 <sbrk_aligned+0x1e>
 80022a6:	bf00      	nop
 80022a8:	20000208 	.word	0x20000208

080022ac <_malloc_r>:
 80022ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b0:	1ccd      	adds	r5, r1, #3
 80022b2:	f025 0503 	bic.w	r5, r5, #3
 80022b6:	3508      	adds	r5, #8
 80022b8:	2d0c      	cmp	r5, #12
 80022ba:	bf38      	it	cc
 80022bc:	250c      	movcc	r5, #12
 80022be:	2d00      	cmp	r5, #0
 80022c0:	4606      	mov	r6, r0
 80022c2:	db01      	blt.n	80022c8 <_malloc_r+0x1c>
 80022c4:	42a9      	cmp	r1, r5
 80022c6:	d904      	bls.n	80022d2 <_malloc_r+0x26>
 80022c8:	230c      	movs	r3, #12
 80022ca:	6033      	str	r3, [r6, #0]
 80022cc:	2000      	movs	r0, #0
 80022ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023a8 <_malloc_r+0xfc>
 80022d6:	f000 f869 	bl	80023ac <__malloc_lock>
 80022da:	f8d8 3000 	ldr.w	r3, [r8]
 80022de:	461c      	mov	r4, r3
 80022e0:	bb44      	cbnz	r4, 8002334 <_malloc_r+0x88>
 80022e2:	4629      	mov	r1, r5
 80022e4:	4630      	mov	r0, r6
 80022e6:	f7ff ffbf 	bl	8002268 <sbrk_aligned>
 80022ea:	1c43      	adds	r3, r0, #1
 80022ec:	4604      	mov	r4, r0
 80022ee:	d158      	bne.n	80023a2 <_malloc_r+0xf6>
 80022f0:	f8d8 4000 	ldr.w	r4, [r8]
 80022f4:	4627      	mov	r7, r4
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d143      	bne.n	8002382 <_malloc_r+0xd6>
 80022fa:	2c00      	cmp	r4, #0
 80022fc:	d04b      	beq.n	8002396 <_malloc_r+0xea>
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	4639      	mov	r1, r7
 8002302:	4630      	mov	r0, r6
 8002304:	eb04 0903 	add.w	r9, r4, r3
 8002308:	f000 fb5a 	bl	80029c0 <_sbrk_r>
 800230c:	4581      	cmp	r9, r0
 800230e:	d142      	bne.n	8002396 <_malloc_r+0xea>
 8002310:	6821      	ldr	r1, [r4, #0]
 8002312:	1a6d      	subs	r5, r5, r1
 8002314:	4629      	mov	r1, r5
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff ffa6 	bl	8002268 <sbrk_aligned>
 800231c:	3001      	adds	r0, #1
 800231e:	d03a      	beq.n	8002396 <_malloc_r+0xea>
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	442b      	add	r3, r5
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	f8d8 3000 	ldr.w	r3, [r8]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	bb62      	cbnz	r2, 8002388 <_malloc_r+0xdc>
 800232e:	f8c8 7000 	str.w	r7, [r8]
 8002332:	e00f      	b.n	8002354 <_malloc_r+0xa8>
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	1b52      	subs	r2, r2, r5
 8002338:	d420      	bmi.n	800237c <_malloc_r+0xd0>
 800233a:	2a0b      	cmp	r2, #11
 800233c:	d917      	bls.n	800236e <_malloc_r+0xc2>
 800233e:	1961      	adds	r1, r4, r5
 8002340:	42a3      	cmp	r3, r4
 8002342:	6025      	str	r5, [r4, #0]
 8002344:	bf18      	it	ne
 8002346:	6059      	strne	r1, [r3, #4]
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	bf08      	it	eq
 800234c:	f8c8 1000 	streq.w	r1, [r8]
 8002350:	5162      	str	r2, [r4, r5]
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	4630      	mov	r0, r6
 8002356:	f000 f82f 	bl	80023b8 <__malloc_unlock>
 800235a:	f104 000b 	add.w	r0, r4, #11
 800235e:	1d23      	adds	r3, r4, #4
 8002360:	f020 0007 	bic.w	r0, r0, #7
 8002364:	1ac2      	subs	r2, r0, r3
 8002366:	bf1c      	itt	ne
 8002368:	1a1b      	subne	r3, r3, r0
 800236a:	50a3      	strne	r3, [r4, r2]
 800236c:	e7af      	b.n	80022ce <_malloc_r+0x22>
 800236e:	6862      	ldr	r2, [r4, #4]
 8002370:	42a3      	cmp	r3, r4
 8002372:	bf0c      	ite	eq
 8002374:	f8c8 2000 	streq.w	r2, [r8]
 8002378:	605a      	strne	r2, [r3, #4]
 800237a:	e7eb      	b.n	8002354 <_malloc_r+0xa8>
 800237c:	4623      	mov	r3, r4
 800237e:	6864      	ldr	r4, [r4, #4]
 8002380:	e7ae      	b.n	80022e0 <_malloc_r+0x34>
 8002382:	463c      	mov	r4, r7
 8002384:	687f      	ldr	r7, [r7, #4]
 8002386:	e7b6      	b.n	80022f6 <_malloc_r+0x4a>
 8002388:	461a      	mov	r2, r3
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	42a3      	cmp	r3, r4
 800238e:	d1fb      	bne.n	8002388 <_malloc_r+0xdc>
 8002390:	2300      	movs	r3, #0
 8002392:	6053      	str	r3, [r2, #4]
 8002394:	e7de      	b.n	8002354 <_malloc_r+0xa8>
 8002396:	230c      	movs	r3, #12
 8002398:	6033      	str	r3, [r6, #0]
 800239a:	4630      	mov	r0, r6
 800239c:	f000 f80c 	bl	80023b8 <__malloc_unlock>
 80023a0:	e794      	b.n	80022cc <_malloc_r+0x20>
 80023a2:	6005      	str	r5, [r0, #0]
 80023a4:	e7d6      	b.n	8002354 <_malloc_r+0xa8>
 80023a6:	bf00      	nop
 80023a8:	2000020c 	.word	0x2000020c

080023ac <__malloc_lock>:
 80023ac:	4801      	ldr	r0, [pc, #4]	@ (80023b4 <__malloc_lock+0x8>)
 80023ae:	f7ff bf0f 	b.w	80021d0 <__retarget_lock_acquire_recursive>
 80023b2:	bf00      	nop
 80023b4:	20000204 	.word	0x20000204

080023b8 <__malloc_unlock>:
 80023b8:	4801      	ldr	r0, [pc, #4]	@ (80023c0 <__malloc_unlock+0x8>)
 80023ba:	f7ff bf0a 	b.w	80021d2 <__retarget_lock_release_recursive>
 80023be:	bf00      	nop
 80023c0:	20000204 	.word	0x20000204

080023c4 <__ssputs_r>:
 80023c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c8:	688e      	ldr	r6, [r1, #8]
 80023ca:	461f      	mov	r7, r3
 80023cc:	42be      	cmp	r6, r7
 80023ce:	680b      	ldr	r3, [r1, #0]
 80023d0:	4682      	mov	sl, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	4690      	mov	r8, r2
 80023d6:	d82d      	bhi.n	8002434 <__ssputs_r+0x70>
 80023d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023e0:	d026      	beq.n	8002430 <__ssputs_r+0x6c>
 80023e2:	6965      	ldr	r5, [r4, #20]
 80023e4:	6909      	ldr	r1, [r1, #16]
 80023e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023ea:	eba3 0901 	sub.w	r9, r3, r1
 80023ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023f2:	1c7b      	adds	r3, r7, #1
 80023f4:	444b      	add	r3, r9
 80023f6:	106d      	asrs	r5, r5, #1
 80023f8:	429d      	cmp	r5, r3
 80023fa:	bf38      	it	cc
 80023fc:	461d      	movcc	r5, r3
 80023fe:	0553      	lsls	r3, r2, #21
 8002400:	d527      	bpl.n	8002452 <__ssputs_r+0x8e>
 8002402:	4629      	mov	r1, r5
 8002404:	f7ff ff52 	bl	80022ac <_malloc_r>
 8002408:	4606      	mov	r6, r0
 800240a:	b360      	cbz	r0, 8002466 <__ssputs_r+0xa2>
 800240c:	6921      	ldr	r1, [r4, #16]
 800240e:	464a      	mov	r2, r9
 8002410:	f000 fae6 	bl	80029e0 <memcpy>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800241a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	6126      	str	r6, [r4, #16]
 8002422:	6165      	str	r5, [r4, #20]
 8002424:	444e      	add	r6, r9
 8002426:	eba5 0509 	sub.w	r5, r5, r9
 800242a:	6026      	str	r6, [r4, #0]
 800242c:	60a5      	str	r5, [r4, #8]
 800242e:	463e      	mov	r6, r7
 8002430:	42be      	cmp	r6, r7
 8002432:	d900      	bls.n	8002436 <__ssputs_r+0x72>
 8002434:	463e      	mov	r6, r7
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	4632      	mov	r2, r6
 800243a:	4641      	mov	r1, r8
 800243c:	f000 faa6 	bl	800298c <memmove>
 8002440:	68a3      	ldr	r3, [r4, #8]
 8002442:	1b9b      	subs	r3, r3, r6
 8002444:	60a3      	str	r3, [r4, #8]
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	4433      	add	r3, r6
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	2000      	movs	r0, #0
 800244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002452:	462a      	mov	r2, r5
 8002454:	f000 fad2 	bl	80029fc <_realloc_r>
 8002458:	4606      	mov	r6, r0
 800245a:	2800      	cmp	r0, #0
 800245c:	d1e0      	bne.n	8002420 <__ssputs_r+0x5c>
 800245e:	6921      	ldr	r1, [r4, #16]
 8002460:	4650      	mov	r0, sl
 8002462:	f7ff feb7 	bl	80021d4 <_free_r>
 8002466:	230c      	movs	r3, #12
 8002468:	f8ca 3000 	str.w	r3, [sl]
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	e7e9      	b.n	800244e <__ssputs_r+0x8a>
	...

0800247c <_svfiprintf_r>:
 800247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002480:	4698      	mov	r8, r3
 8002482:	898b      	ldrh	r3, [r1, #12]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	b09d      	sub	sp, #116	@ 0x74
 8002488:	4607      	mov	r7, r0
 800248a:	460d      	mov	r5, r1
 800248c:	4614      	mov	r4, r2
 800248e:	d510      	bpl.n	80024b2 <_svfiprintf_r+0x36>
 8002490:	690b      	ldr	r3, [r1, #16]
 8002492:	b973      	cbnz	r3, 80024b2 <_svfiprintf_r+0x36>
 8002494:	2140      	movs	r1, #64	@ 0x40
 8002496:	f7ff ff09 	bl	80022ac <_malloc_r>
 800249a:	6028      	str	r0, [r5, #0]
 800249c:	6128      	str	r0, [r5, #16]
 800249e:	b930      	cbnz	r0, 80024ae <_svfiprintf_r+0x32>
 80024a0:	230c      	movs	r3, #12
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	b01d      	add	sp, #116	@ 0x74
 80024aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ae:	2340      	movs	r3, #64	@ 0x40
 80024b0:	616b      	str	r3, [r5, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80024b6:	2320      	movs	r3, #32
 80024b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80024c0:	2330      	movs	r3, #48	@ 0x30
 80024c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002660 <_svfiprintf_r+0x1e4>
 80024c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024ca:	f04f 0901 	mov.w	r9, #1
 80024ce:	4623      	mov	r3, r4
 80024d0:	469a      	mov	sl, r3
 80024d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024d6:	b10a      	cbz	r2, 80024dc <_svfiprintf_r+0x60>
 80024d8:	2a25      	cmp	r2, #37	@ 0x25
 80024da:	d1f9      	bne.n	80024d0 <_svfiprintf_r+0x54>
 80024dc:	ebba 0b04 	subs.w	fp, sl, r4
 80024e0:	d00b      	beq.n	80024fa <_svfiprintf_r+0x7e>
 80024e2:	465b      	mov	r3, fp
 80024e4:	4622      	mov	r2, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	4638      	mov	r0, r7
 80024ea:	f7ff ff6b 	bl	80023c4 <__ssputs_r>
 80024ee:	3001      	adds	r0, #1
 80024f0:	f000 80a7 	beq.w	8002642 <_svfiprintf_r+0x1c6>
 80024f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024f6:	445a      	add	r2, fp
 80024f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80024fa:	f89a 3000 	ldrb.w	r3, [sl]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 809f 	beq.w	8002642 <_svfiprintf_r+0x1c6>
 8002504:	2300      	movs	r3, #0
 8002506:	f04f 32ff 	mov.w	r2, #4294967295
 800250a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800250e:	f10a 0a01 	add.w	sl, sl, #1
 8002512:	9304      	str	r3, [sp, #16]
 8002514:	9307      	str	r3, [sp, #28]
 8002516:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800251a:	931a      	str	r3, [sp, #104]	@ 0x68
 800251c:	4654      	mov	r4, sl
 800251e:	2205      	movs	r2, #5
 8002520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002524:	484e      	ldr	r0, [pc, #312]	@ (8002660 <_svfiprintf_r+0x1e4>)
 8002526:	f7fd fe63 	bl	80001f0 <memchr>
 800252a:	9a04      	ldr	r2, [sp, #16]
 800252c:	b9d8      	cbnz	r0, 8002566 <_svfiprintf_r+0xea>
 800252e:	06d0      	lsls	r0, r2, #27
 8002530:	bf44      	itt	mi
 8002532:	2320      	movmi	r3, #32
 8002534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002538:	0711      	lsls	r1, r2, #28
 800253a:	bf44      	itt	mi
 800253c:	232b      	movmi	r3, #43	@ 0x2b
 800253e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002542:	f89a 3000 	ldrb.w	r3, [sl]
 8002546:	2b2a      	cmp	r3, #42	@ 0x2a
 8002548:	d015      	beq.n	8002576 <_svfiprintf_r+0xfa>
 800254a:	9a07      	ldr	r2, [sp, #28]
 800254c:	4654      	mov	r4, sl
 800254e:	2000      	movs	r0, #0
 8002550:	f04f 0c0a 	mov.w	ip, #10
 8002554:	4621      	mov	r1, r4
 8002556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800255a:	3b30      	subs	r3, #48	@ 0x30
 800255c:	2b09      	cmp	r3, #9
 800255e:	d94b      	bls.n	80025f8 <_svfiprintf_r+0x17c>
 8002560:	b1b0      	cbz	r0, 8002590 <_svfiprintf_r+0x114>
 8002562:	9207      	str	r2, [sp, #28]
 8002564:	e014      	b.n	8002590 <_svfiprintf_r+0x114>
 8002566:	eba0 0308 	sub.w	r3, r0, r8
 800256a:	fa09 f303 	lsl.w	r3, r9, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	9304      	str	r3, [sp, #16]
 8002572:	46a2      	mov	sl, r4
 8002574:	e7d2      	b.n	800251c <_svfiprintf_r+0xa0>
 8002576:	9b03      	ldr	r3, [sp, #12]
 8002578:	1d19      	adds	r1, r3, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	9103      	str	r1, [sp, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	bfbb      	ittet	lt
 8002582:	425b      	neglt	r3, r3
 8002584:	f042 0202 	orrlt.w	r2, r2, #2
 8002588:	9307      	strge	r3, [sp, #28]
 800258a:	9307      	strlt	r3, [sp, #28]
 800258c:	bfb8      	it	lt
 800258e:	9204      	strlt	r2, [sp, #16]
 8002590:	7823      	ldrb	r3, [r4, #0]
 8002592:	2b2e      	cmp	r3, #46	@ 0x2e
 8002594:	d10a      	bne.n	80025ac <_svfiprintf_r+0x130>
 8002596:	7863      	ldrb	r3, [r4, #1]
 8002598:	2b2a      	cmp	r3, #42	@ 0x2a
 800259a:	d132      	bne.n	8002602 <_svfiprintf_r+0x186>
 800259c:	9b03      	ldr	r3, [sp, #12]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	9203      	str	r2, [sp, #12]
 80025a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025a8:	3402      	adds	r4, #2
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002670 <_svfiprintf_r+0x1f4>
 80025b0:	7821      	ldrb	r1, [r4, #0]
 80025b2:	2203      	movs	r2, #3
 80025b4:	4650      	mov	r0, sl
 80025b6:	f7fd fe1b 	bl	80001f0 <memchr>
 80025ba:	b138      	cbz	r0, 80025cc <_svfiprintf_r+0x150>
 80025bc:	9b04      	ldr	r3, [sp, #16]
 80025be:	eba0 000a 	sub.w	r0, r0, sl
 80025c2:	2240      	movs	r2, #64	@ 0x40
 80025c4:	4082      	lsls	r2, r0
 80025c6:	4313      	orrs	r3, r2
 80025c8:	3401      	adds	r4, #1
 80025ca:	9304      	str	r3, [sp, #16]
 80025cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d0:	4824      	ldr	r0, [pc, #144]	@ (8002664 <_svfiprintf_r+0x1e8>)
 80025d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025d6:	2206      	movs	r2, #6
 80025d8:	f7fd fe0a 	bl	80001f0 <memchr>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d036      	beq.n	800264e <_svfiprintf_r+0x1d2>
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <_svfiprintf_r+0x1ec>)
 80025e2:	bb1b      	cbnz	r3, 800262c <_svfiprintf_r+0x1b0>
 80025e4:	9b03      	ldr	r3, [sp, #12]
 80025e6:	3307      	adds	r3, #7
 80025e8:	f023 0307 	bic.w	r3, r3, #7
 80025ec:	3308      	adds	r3, #8
 80025ee:	9303      	str	r3, [sp, #12]
 80025f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025f2:	4433      	add	r3, r6
 80025f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80025f6:	e76a      	b.n	80024ce <_svfiprintf_r+0x52>
 80025f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025fc:	460c      	mov	r4, r1
 80025fe:	2001      	movs	r0, #1
 8002600:	e7a8      	b.n	8002554 <_svfiprintf_r+0xd8>
 8002602:	2300      	movs	r3, #0
 8002604:	3401      	adds	r4, #1
 8002606:	9305      	str	r3, [sp, #20]
 8002608:	4619      	mov	r1, r3
 800260a:	f04f 0c0a 	mov.w	ip, #10
 800260e:	4620      	mov	r0, r4
 8002610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002614:	3a30      	subs	r2, #48	@ 0x30
 8002616:	2a09      	cmp	r2, #9
 8002618:	d903      	bls.n	8002622 <_svfiprintf_r+0x1a6>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0c6      	beq.n	80025ac <_svfiprintf_r+0x130>
 800261e:	9105      	str	r1, [sp, #20]
 8002620:	e7c4      	b.n	80025ac <_svfiprintf_r+0x130>
 8002622:	fb0c 2101 	mla	r1, ip, r1, r2
 8002626:	4604      	mov	r4, r0
 8002628:	2301      	movs	r3, #1
 800262a:	e7f0      	b.n	800260e <_svfiprintf_r+0x192>
 800262c:	ab03      	add	r3, sp, #12
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	462a      	mov	r2, r5
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <_svfiprintf_r+0x1f0>)
 8002634:	a904      	add	r1, sp, #16
 8002636:	4638      	mov	r0, r7
 8002638:	f3af 8000 	nop.w
 800263c:	1c42      	adds	r2, r0, #1
 800263e:	4606      	mov	r6, r0
 8002640:	d1d6      	bne.n	80025f0 <_svfiprintf_r+0x174>
 8002642:	89ab      	ldrh	r3, [r5, #12]
 8002644:	065b      	lsls	r3, r3, #25
 8002646:	f53f af2d 	bmi.w	80024a4 <_svfiprintf_r+0x28>
 800264a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800264c:	e72c      	b.n	80024a8 <_svfiprintf_r+0x2c>
 800264e:	ab03      	add	r3, sp, #12
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	462a      	mov	r2, r5
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <_svfiprintf_r+0x1f0>)
 8002656:	a904      	add	r1, sp, #16
 8002658:	4638      	mov	r0, r7
 800265a:	f000 f879 	bl	8002750 <_printf_i>
 800265e:	e7ed      	b.n	800263c <_svfiprintf_r+0x1c0>
 8002660:	08002ad8 	.word	0x08002ad8
 8002664:	08002ae2 	.word	0x08002ae2
 8002668:	00000000 	.word	0x00000000
 800266c:	080023c5 	.word	0x080023c5
 8002670:	08002ade 	.word	0x08002ade

08002674 <_printf_common>:
 8002674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002678:	4616      	mov	r6, r2
 800267a:	4698      	mov	r8, r3
 800267c:	688a      	ldr	r2, [r1, #8]
 800267e:	690b      	ldr	r3, [r1, #16]
 8002680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002684:	4293      	cmp	r3, r2
 8002686:	bfb8      	it	lt
 8002688:	4613      	movlt	r3, r2
 800268a:	6033      	str	r3, [r6, #0]
 800268c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002690:	4607      	mov	r7, r0
 8002692:	460c      	mov	r4, r1
 8002694:	b10a      	cbz	r2, 800269a <_printf_common+0x26>
 8002696:	3301      	adds	r3, #1
 8002698:	6033      	str	r3, [r6, #0]
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	0699      	lsls	r1, r3, #26
 800269e:	bf42      	ittt	mi
 80026a0:	6833      	ldrmi	r3, [r6, #0]
 80026a2:	3302      	addmi	r3, #2
 80026a4:	6033      	strmi	r3, [r6, #0]
 80026a6:	6825      	ldr	r5, [r4, #0]
 80026a8:	f015 0506 	ands.w	r5, r5, #6
 80026ac:	d106      	bne.n	80026bc <_printf_common+0x48>
 80026ae:	f104 0a19 	add.w	sl, r4, #25
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	6832      	ldr	r2, [r6, #0]
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	42ab      	cmp	r3, r5
 80026ba:	dc26      	bgt.n	800270a <_printf_common+0x96>
 80026bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	3b00      	subs	r3, #0
 80026c4:	bf18      	it	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	0692      	lsls	r2, r2, #26
 80026ca:	d42b      	bmi.n	8002724 <_printf_common+0xb0>
 80026cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026d0:	4641      	mov	r1, r8
 80026d2:	4638      	mov	r0, r7
 80026d4:	47c8      	blx	r9
 80026d6:	3001      	adds	r0, #1
 80026d8:	d01e      	beq.n	8002718 <_printf_common+0xa4>
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	6922      	ldr	r2, [r4, #16]
 80026de:	f003 0306 	and.w	r3, r3, #6
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf02      	ittt	eq
 80026e6:	68e5      	ldreq	r5, [r4, #12]
 80026e8:	6833      	ldreq	r3, [r6, #0]
 80026ea:	1aed      	subeq	r5, r5, r3
 80026ec:	68a3      	ldr	r3, [r4, #8]
 80026ee:	bf0c      	ite	eq
 80026f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026f4:	2500      	movne	r5, #0
 80026f6:	4293      	cmp	r3, r2
 80026f8:	bfc4      	itt	gt
 80026fa:	1a9b      	subgt	r3, r3, r2
 80026fc:	18ed      	addgt	r5, r5, r3
 80026fe:	2600      	movs	r6, #0
 8002700:	341a      	adds	r4, #26
 8002702:	42b5      	cmp	r5, r6
 8002704:	d11a      	bne.n	800273c <_printf_common+0xc8>
 8002706:	2000      	movs	r0, #0
 8002708:	e008      	b.n	800271c <_printf_common+0xa8>
 800270a:	2301      	movs	r3, #1
 800270c:	4652      	mov	r2, sl
 800270e:	4641      	mov	r1, r8
 8002710:	4638      	mov	r0, r7
 8002712:	47c8      	blx	r9
 8002714:	3001      	adds	r0, #1
 8002716:	d103      	bne.n	8002720 <_printf_common+0xac>
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002720:	3501      	adds	r5, #1
 8002722:	e7c6      	b.n	80026b2 <_printf_common+0x3e>
 8002724:	18e1      	adds	r1, r4, r3
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	2030      	movs	r0, #48	@ 0x30
 800272a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800272e:	4422      	add	r2, r4
 8002730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002738:	3302      	adds	r3, #2
 800273a:	e7c7      	b.n	80026cc <_printf_common+0x58>
 800273c:	2301      	movs	r3, #1
 800273e:	4622      	mov	r2, r4
 8002740:	4641      	mov	r1, r8
 8002742:	4638      	mov	r0, r7
 8002744:	47c8      	blx	r9
 8002746:	3001      	adds	r0, #1
 8002748:	d0e6      	beq.n	8002718 <_printf_common+0xa4>
 800274a:	3601      	adds	r6, #1
 800274c:	e7d9      	b.n	8002702 <_printf_common+0x8e>
	...

08002750 <_printf_i>:
 8002750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	7e0f      	ldrb	r7, [r1, #24]
 8002756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002758:	2f78      	cmp	r7, #120	@ 0x78
 800275a:	4691      	mov	r9, r2
 800275c:	4680      	mov	r8, r0
 800275e:	460c      	mov	r4, r1
 8002760:	469a      	mov	sl, r3
 8002762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002766:	d807      	bhi.n	8002778 <_printf_i+0x28>
 8002768:	2f62      	cmp	r7, #98	@ 0x62
 800276a:	d80a      	bhi.n	8002782 <_printf_i+0x32>
 800276c:	2f00      	cmp	r7, #0
 800276e:	f000 80d1 	beq.w	8002914 <_printf_i+0x1c4>
 8002772:	2f58      	cmp	r7, #88	@ 0x58
 8002774:	f000 80b8 	beq.w	80028e8 <_printf_i+0x198>
 8002778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800277c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002780:	e03a      	b.n	80027f8 <_printf_i+0xa8>
 8002782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002786:	2b15      	cmp	r3, #21
 8002788:	d8f6      	bhi.n	8002778 <_printf_i+0x28>
 800278a:	a101      	add	r1, pc, #4	@ (adr r1, 8002790 <_printf_i+0x40>)
 800278c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002790:	080027e9 	.word	0x080027e9
 8002794:	080027fd 	.word	0x080027fd
 8002798:	08002779 	.word	0x08002779
 800279c:	08002779 	.word	0x08002779
 80027a0:	08002779 	.word	0x08002779
 80027a4:	08002779 	.word	0x08002779
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	08002779 	.word	0x08002779
 80027b0:	08002779 	.word	0x08002779
 80027b4:	08002779 	.word	0x08002779
 80027b8:	08002779 	.word	0x08002779
 80027bc:	080028fb 	.word	0x080028fb
 80027c0:	08002827 	.word	0x08002827
 80027c4:	080028b5 	.word	0x080028b5
 80027c8:	08002779 	.word	0x08002779
 80027cc:	08002779 	.word	0x08002779
 80027d0:	0800291d 	.word	0x0800291d
 80027d4:	08002779 	.word	0x08002779
 80027d8:	08002827 	.word	0x08002827
 80027dc:	08002779 	.word	0x08002779
 80027e0:	08002779 	.word	0x08002779
 80027e4:	080028bd 	.word	0x080028bd
 80027e8:	6833      	ldr	r3, [r6, #0]
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6032      	str	r2, [r6, #0]
 80027f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027f8:	2301      	movs	r3, #1
 80027fa:	e09c      	b.n	8002936 <_printf_i+0x1e6>
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	1d19      	adds	r1, r3, #4
 8002802:	6031      	str	r1, [r6, #0]
 8002804:	0606      	lsls	r6, r0, #24
 8002806:	d501      	bpl.n	800280c <_printf_i+0xbc>
 8002808:	681d      	ldr	r5, [r3, #0]
 800280a:	e003      	b.n	8002814 <_printf_i+0xc4>
 800280c:	0645      	lsls	r5, r0, #25
 800280e:	d5fb      	bpl.n	8002808 <_printf_i+0xb8>
 8002810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002814:	2d00      	cmp	r5, #0
 8002816:	da03      	bge.n	8002820 <_printf_i+0xd0>
 8002818:	232d      	movs	r3, #45	@ 0x2d
 800281a:	426d      	negs	r5, r5
 800281c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002820:	4858      	ldr	r0, [pc, #352]	@ (8002984 <_printf_i+0x234>)
 8002822:	230a      	movs	r3, #10
 8002824:	e011      	b.n	800284a <_printf_i+0xfa>
 8002826:	6821      	ldr	r1, [r4, #0]
 8002828:	6833      	ldr	r3, [r6, #0]
 800282a:	0608      	lsls	r0, r1, #24
 800282c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002830:	d402      	bmi.n	8002838 <_printf_i+0xe8>
 8002832:	0649      	lsls	r1, r1, #25
 8002834:	bf48      	it	mi
 8002836:	b2ad      	uxthmi	r5, r5
 8002838:	2f6f      	cmp	r7, #111	@ 0x6f
 800283a:	4852      	ldr	r0, [pc, #328]	@ (8002984 <_printf_i+0x234>)
 800283c:	6033      	str	r3, [r6, #0]
 800283e:	bf14      	ite	ne
 8002840:	230a      	movne	r3, #10
 8002842:	2308      	moveq	r3, #8
 8002844:	2100      	movs	r1, #0
 8002846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800284a:	6866      	ldr	r6, [r4, #4]
 800284c:	60a6      	str	r6, [r4, #8]
 800284e:	2e00      	cmp	r6, #0
 8002850:	db05      	blt.n	800285e <_printf_i+0x10e>
 8002852:	6821      	ldr	r1, [r4, #0]
 8002854:	432e      	orrs	r6, r5
 8002856:	f021 0104 	bic.w	r1, r1, #4
 800285a:	6021      	str	r1, [r4, #0]
 800285c:	d04b      	beq.n	80028f6 <_printf_i+0x1a6>
 800285e:	4616      	mov	r6, r2
 8002860:	fbb5 f1f3 	udiv	r1, r5, r3
 8002864:	fb03 5711 	mls	r7, r3, r1, r5
 8002868:	5dc7      	ldrb	r7, [r0, r7]
 800286a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800286e:	462f      	mov	r7, r5
 8002870:	42bb      	cmp	r3, r7
 8002872:	460d      	mov	r5, r1
 8002874:	d9f4      	bls.n	8002860 <_printf_i+0x110>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d10b      	bne.n	8002892 <_printf_i+0x142>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	07df      	lsls	r7, r3, #31
 800287e:	d508      	bpl.n	8002892 <_printf_i+0x142>
 8002880:	6923      	ldr	r3, [r4, #16]
 8002882:	6861      	ldr	r1, [r4, #4]
 8002884:	4299      	cmp	r1, r3
 8002886:	bfde      	ittt	le
 8002888:	2330      	movle	r3, #48	@ 0x30
 800288a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800288e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002892:	1b92      	subs	r2, r2, r6
 8002894:	6122      	str	r2, [r4, #16]
 8002896:	f8cd a000 	str.w	sl, [sp]
 800289a:	464b      	mov	r3, r9
 800289c:	aa03      	add	r2, sp, #12
 800289e:	4621      	mov	r1, r4
 80028a0:	4640      	mov	r0, r8
 80028a2:	f7ff fee7 	bl	8002674 <_printf_common>
 80028a6:	3001      	adds	r0, #1
 80028a8:	d14a      	bne.n	8002940 <_printf_i+0x1f0>
 80028aa:	f04f 30ff 	mov.w	r0, #4294967295
 80028ae:	b004      	add	sp, #16
 80028b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	6023      	str	r3, [r4, #0]
 80028bc:	4832      	ldr	r0, [pc, #200]	@ (8002988 <_printf_i+0x238>)
 80028be:	2778      	movs	r7, #120	@ 0x78
 80028c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	6831      	ldr	r1, [r6, #0]
 80028c8:	061f      	lsls	r7, r3, #24
 80028ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80028ce:	d402      	bmi.n	80028d6 <_printf_i+0x186>
 80028d0:	065f      	lsls	r7, r3, #25
 80028d2:	bf48      	it	mi
 80028d4:	b2ad      	uxthmi	r5, r5
 80028d6:	6031      	str	r1, [r6, #0]
 80028d8:	07d9      	lsls	r1, r3, #31
 80028da:	bf44      	itt	mi
 80028dc:	f043 0320 	orrmi.w	r3, r3, #32
 80028e0:	6023      	strmi	r3, [r4, #0]
 80028e2:	b11d      	cbz	r5, 80028ec <_printf_i+0x19c>
 80028e4:	2310      	movs	r3, #16
 80028e6:	e7ad      	b.n	8002844 <_printf_i+0xf4>
 80028e8:	4826      	ldr	r0, [pc, #152]	@ (8002984 <_printf_i+0x234>)
 80028ea:	e7e9      	b.n	80028c0 <_printf_i+0x170>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f023 0320 	bic.w	r3, r3, #32
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	e7f6      	b.n	80028e4 <_printf_i+0x194>
 80028f6:	4616      	mov	r6, r2
 80028f8:	e7bd      	b.n	8002876 <_printf_i+0x126>
 80028fa:	6833      	ldr	r3, [r6, #0]
 80028fc:	6825      	ldr	r5, [r4, #0]
 80028fe:	6961      	ldr	r1, [r4, #20]
 8002900:	1d18      	adds	r0, r3, #4
 8002902:	6030      	str	r0, [r6, #0]
 8002904:	062e      	lsls	r6, r5, #24
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	d501      	bpl.n	800290e <_printf_i+0x1be>
 800290a:	6019      	str	r1, [r3, #0]
 800290c:	e002      	b.n	8002914 <_printf_i+0x1c4>
 800290e:	0668      	lsls	r0, r5, #25
 8002910:	d5fb      	bpl.n	800290a <_printf_i+0x1ba>
 8002912:	8019      	strh	r1, [r3, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	6123      	str	r3, [r4, #16]
 8002918:	4616      	mov	r6, r2
 800291a:	e7bc      	b.n	8002896 <_printf_i+0x146>
 800291c:	6833      	ldr	r3, [r6, #0]
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	6032      	str	r2, [r6, #0]
 8002922:	681e      	ldr	r6, [r3, #0]
 8002924:	6862      	ldr	r2, [r4, #4]
 8002926:	2100      	movs	r1, #0
 8002928:	4630      	mov	r0, r6
 800292a:	f7fd fc61 	bl	80001f0 <memchr>
 800292e:	b108      	cbz	r0, 8002934 <_printf_i+0x1e4>
 8002930:	1b80      	subs	r0, r0, r6
 8002932:	6060      	str	r0, [r4, #4]
 8002934:	6863      	ldr	r3, [r4, #4]
 8002936:	6123      	str	r3, [r4, #16]
 8002938:	2300      	movs	r3, #0
 800293a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800293e:	e7aa      	b.n	8002896 <_printf_i+0x146>
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	4632      	mov	r2, r6
 8002944:	4649      	mov	r1, r9
 8002946:	4640      	mov	r0, r8
 8002948:	47d0      	blx	sl
 800294a:	3001      	adds	r0, #1
 800294c:	d0ad      	beq.n	80028aa <_printf_i+0x15a>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	079b      	lsls	r3, r3, #30
 8002952:	d413      	bmi.n	800297c <_printf_i+0x22c>
 8002954:	68e0      	ldr	r0, [r4, #12]
 8002956:	9b03      	ldr	r3, [sp, #12]
 8002958:	4298      	cmp	r0, r3
 800295a:	bfb8      	it	lt
 800295c:	4618      	movlt	r0, r3
 800295e:	e7a6      	b.n	80028ae <_printf_i+0x15e>
 8002960:	2301      	movs	r3, #1
 8002962:	4632      	mov	r2, r6
 8002964:	4649      	mov	r1, r9
 8002966:	4640      	mov	r0, r8
 8002968:	47d0      	blx	sl
 800296a:	3001      	adds	r0, #1
 800296c:	d09d      	beq.n	80028aa <_printf_i+0x15a>
 800296e:	3501      	adds	r5, #1
 8002970:	68e3      	ldr	r3, [r4, #12]
 8002972:	9903      	ldr	r1, [sp, #12]
 8002974:	1a5b      	subs	r3, r3, r1
 8002976:	42ab      	cmp	r3, r5
 8002978:	dcf2      	bgt.n	8002960 <_printf_i+0x210>
 800297a:	e7eb      	b.n	8002954 <_printf_i+0x204>
 800297c:	2500      	movs	r5, #0
 800297e:	f104 0619 	add.w	r6, r4, #25
 8002982:	e7f5      	b.n	8002970 <_printf_i+0x220>
 8002984:	08002ae9 	.word	0x08002ae9
 8002988:	08002afa 	.word	0x08002afa

0800298c <memmove>:
 800298c:	4288      	cmp	r0, r1
 800298e:	b510      	push	{r4, lr}
 8002990:	eb01 0402 	add.w	r4, r1, r2
 8002994:	d902      	bls.n	800299c <memmove+0x10>
 8002996:	4284      	cmp	r4, r0
 8002998:	4623      	mov	r3, r4
 800299a:	d807      	bhi.n	80029ac <memmove+0x20>
 800299c:	1e43      	subs	r3, r0, #1
 800299e:	42a1      	cmp	r1, r4
 80029a0:	d008      	beq.n	80029b4 <memmove+0x28>
 80029a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029aa:	e7f8      	b.n	800299e <memmove+0x12>
 80029ac:	4402      	add	r2, r0
 80029ae:	4601      	mov	r1, r0
 80029b0:	428a      	cmp	r2, r1
 80029b2:	d100      	bne.n	80029b6 <memmove+0x2a>
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029be:	e7f7      	b.n	80029b0 <memmove+0x24>

080029c0 <_sbrk_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4d06      	ldr	r5, [pc, #24]	@ (80029dc <_sbrk_r+0x1c>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	f7fd ff64 	bl	8000898 <_sbrk>
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d102      	bne.n	80029da <_sbrk_r+0x1a>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	b103      	cbz	r3, 80029da <_sbrk_r+0x1a>
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	bd38      	pop	{r3, r4, r5, pc}
 80029dc:	20000200 	.word	0x20000200

080029e0 <memcpy>:
 80029e0:	440a      	add	r2, r1
 80029e2:	4291      	cmp	r1, r2
 80029e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80029e8:	d100      	bne.n	80029ec <memcpy+0xc>
 80029ea:	4770      	bx	lr
 80029ec:	b510      	push	{r4, lr}
 80029ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029f6:	4291      	cmp	r1, r2
 80029f8:	d1f9      	bne.n	80029ee <memcpy+0xe>
 80029fa:	bd10      	pop	{r4, pc}

080029fc <_realloc_r>:
 80029fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a00:	4607      	mov	r7, r0
 8002a02:	4614      	mov	r4, r2
 8002a04:	460d      	mov	r5, r1
 8002a06:	b921      	cbnz	r1, 8002a12 <_realloc_r+0x16>
 8002a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	f7ff bc4d 	b.w	80022ac <_malloc_r>
 8002a12:	b92a      	cbnz	r2, 8002a20 <_realloc_r+0x24>
 8002a14:	f7ff fbde 	bl	80021d4 <_free_r>
 8002a18:	4625      	mov	r5, r4
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a20:	f000 f81a 	bl	8002a58 <_malloc_usable_size_r>
 8002a24:	4284      	cmp	r4, r0
 8002a26:	4606      	mov	r6, r0
 8002a28:	d802      	bhi.n	8002a30 <_realloc_r+0x34>
 8002a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a2e:	d8f4      	bhi.n	8002a1a <_realloc_r+0x1e>
 8002a30:	4621      	mov	r1, r4
 8002a32:	4638      	mov	r0, r7
 8002a34:	f7ff fc3a 	bl	80022ac <_malloc_r>
 8002a38:	4680      	mov	r8, r0
 8002a3a:	b908      	cbnz	r0, 8002a40 <_realloc_r+0x44>
 8002a3c:	4645      	mov	r5, r8
 8002a3e:	e7ec      	b.n	8002a1a <_realloc_r+0x1e>
 8002a40:	42b4      	cmp	r4, r6
 8002a42:	4622      	mov	r2, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	bf28      	it	cs
 8002a48:	4632      	movcs	r2, r6
 8002a4a:	f7ff ffc9 	bl	80029e0 <memcpy>
 8002a4e:	4629      	mov	r1, r5
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff fbbf 	bl	80021d4 <_free_r>
 8002a56:	e7f1      	b.n	8002a3c <_realloc_r+0x40>

08002a58 <_malloc_usable_size_r>:
 8002a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a5c:	1f18      	subs	r0, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bfbc      	itt	lt
 8002a62:	580b      	ldrlt	r3, [r1, r0]
 8002a64:	18c0      	addlt	r0, r0, r3
 8002a66:	4770      	bx	lr

08002a68 <_init>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr

08002a74 <_fini>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr
